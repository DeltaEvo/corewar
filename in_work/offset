vm/fcnt_01_04.c:19:	process->said_live = true;
vm/fcnt_01_04.c:36:	ft_memcpy(process->registre[param[1]], process->tampon, REG_SIZE);
vm/fcnt_01_04.c:49:			ft_memcpy(process->registre[param[1]],
vm/fcnt_01_04.c:50:					process->registre[param[0]], REG_SIZE);
vm/fcnt_01_04.c:53:		mem_write(game->mem, process->registre[param[0]],
vm/fcnt_01_04.c:54:				(process->offset + (param[1] % IDX_MOD)) % MEM_SIZE, REG_SIZE);
vm/fcnt_01_04.c:66:	ft_memcpy(op1, process->tampon, REG_SIZE);
vm/fcnt_01_04.c:69:	if (!(bin_add(op1, process->tampon, process->registre[param[2]])))
vm/fcnt_05_08.c:23:	ft_memcpy(op1, process->tampon, REG_SIZE);
vm/fcnt_05_08.c:26:	if (!(bin_sub(op1, process->tampon, process->registre[param[2]])))
vm/fcnt_05_08.c:39:	ft_memcpy(op1, process->tampon, REG_SIZE);
vm/fcnt_05_08.c:42:	bin_and(op1, process->tampon, process->registre[param[2]]);
vm/fcnt_05_08.c:54:	ft_memcpy(op1, process->tampon, REG_SIZE);
vm/fcnt_05_08.c:57:	bin_or(op1, process->tampon, process->registre[param[2]]);
vm/fcnt_05_08.c:69:	ft_memcpy(op1, process->tampon, REG_SIZE);
vm/fcnt_05_08.c:72:	bin_xor(op1, process->tampon, process->registre[param[2]]);
vm/fcnt_09_12.c:19:	if (process->carry == false)
vm/fcnt_09_12.c:21:	process->offset = (process->offset + param[0]) % MEM_SIZE;
vm/fcnt_09_12.c:22:	printf ("the new offset is %zu", process->offset);
vm/fcnt_09_12.c:36:	ft_memcpy(op1, process->tampon, REG_SIZE);
vm/fcnt_09_12.c:39:	bin_add(op1, process->tampon, adr);
vm/fcnt_09_12.c:41:	mem_read(game->mem, process->registre[param[2]], (process->offset + adress) % MEM_SIZE, REG_SIZE);
vm/fcnt_09_12.c:58:	ft_memcpy(op1, process->tampon, REG_SIZE);
vm/fcnt_09_12.c:61:	bin_add(op1, process->tampon, adr);
vm/fcnt_09_12.c:63:	printf("\n\t\t \033[32m └─copy to %zu registre = %.2x - %.2x - %.2x - %.2x\033[0m", adress, process->registre[param[0]][0], process->registre[param[0]][1], process->registre[param[0]][2], process->registre[param[0]][3]);
vm/fcnt_09_12.c:64:	mem_write(game->mem, process->registre[param[0]], (process->offset + adress - 2) % MEM_SIZE, REG_SIZE);
vm/fcnt_09_12.c:75:	new_process = add_process(&(game->vec), (process->offset + (param[0] % IDX_MOD)) % MEM_SIZE);
vm/fcnt_13_16.c:21:	ft_memcpy(process->registre[param[1]], process->tampon, REG_SIZE);
vm/fcnt_13_16.c:35:	ft_memcpy(op1, process->tampon, REG_SIZE);
vm/fcnt_13_16.c:38:	bin_add(op1, process->tampon, adr);
vm/fcnt_13_16.c:40:	mem_read(game->mem, process->registre[param[2]], (process->offset + adress) % MEM_SIZE, REG_SIZE);
vm/fcnt_13_16.c:49:	new_process = add_process(&(game->vec), (process->offset + param[1] % MEM_SIZE));
vm/fcnt_13_16.c:65:		c = (process->registre[param[0]][i] % 256);
vm/get_ocp_values.c:75:			ft_memcpy(process->tampon, process->registre[nbr], REG_SIZE);
vm/get_ocp_values.c:78:		conv_int_to_bin(nbr, process->tampon);
vm/get_ocp_values.c:80:		mem_read(vm->mem, process->tampon, (process->offset + nbr) % MEM_SIZE, 2);
vm/get_ocp_values.c:97:			ft_memcpy(process->tampon, process->registre[nbr], REG_SIZE);
vm/get_ocp_values.c:98:			printf("\033[32m Process tampon get %.2x-%.2x-%.2x-%.2x with the register %.2x\033[0m ", process->tampon[0], process->tampon[1], process->tampon[2], process->tampon[3], nbr);
vm/get_ocp_values.c:103:		conv_int_to_bin(nbr, process->tampon);
vm/get_ocp_values.c:104:		printf("\033[32m Process tampon get %.2x-%.2x-%.2x-%.2x with a direct with a nbr = %ld \033[0m ", process->tampon[0], process->tampon[1], process->tampon[2], process->tampon[3], nbr);
vm/get_ocp_values.c:108:		mem_read(vm->mem, process->tampon, (process->offset + nbr % IDX_MOD) % MEM_SIZE, 2);
vm/get_ocp_values.c:109:		printf("\033[32m Process tampon get %.2x-%.2x-%.2x-%.2x with a indirect at the adress %.2x\033[0m ", process->tampon[0], process->tampon[1], process->tampon[2], process->tampon[3], nbr);
vm/pass_opcode.c:17:	const int	opcode = process->actual_opcode;
vm/pass_opcode.c:34:		mem_read(vm->mem, stck, process->offset + tmp, size);
vm/pass_opcode.c:54:	mem_read(vm->mem, stck, process->offset, size);
vm/pass_opcode.c:61:	const int	opcode = process->actual_opcode;
vm/pass_opcode.c:66:		mem_read(vm->mem, tampom, process->offset, 1);
vm/pass_opcode.c:83:	process->has_read = false;
vm/pass_opcode.c:90:	printf ("\033[32;01m	└─Executing the instruction %s \033[0m", g_ops[process->actual_opcode].name);
vm/pass_opcode.c:91:	g_fcnt[process->actual_opcode](vm, process, params, ocp);
vm/pass_opcode.c:92:	process->cycle_to_do = 0;
vm/pass_opcode.c:100:	mem_read(game->mem, stck, process->offset, 1);
vm/pass_opcode.c:102:	process->actual_opcode = stck[0];
vm/pass_opcode.c:103:	if (process->actual_opcode <= 0 || process->actual_opcode > 16)
vm/pass_opcode.c:105:		printf ("\033[31m└─Bad opcode %d\033[0m\n", process->actual_opcode);
vm/pass_opcode.c:106:		process->actual_opcode = 0;
vm/pass_opcode.c:109:	process->has_read = true;
vm/pass_opcode.c:110:	process->cycle_to_do = g_ops[stck[0]].cycle;
vm/pass_opcode.c:111:	printf ("\033[32;01m└─Process actual_opcode %d\033[0m\n", process->actual_opcode);
vm/play.c:170:			printf("process[\033[32;01m%zu\033[0m] working at mem[\033[33;01m%4zu\033[0m]  \033[31m%.3zu\033[0m | \033[37;01m%.4zu\033[0m | \033[34;01m%d\033[0m \n", i, process->offset, process->cycle_to_do, vm.cycle, process->is_alive ? 1 : 0);
vm/tools_fcnt.c:46:	process->carry = 1;
vm/tools_fcnt.c:54:	process->carry = -1;
vm/tools_fcnt.c:79:		process->offset = (process->offset + size) % MEM_SIZE;
vm/tools_fcnt.c:82:		process->offset += size % IDX_MOD;
vm/tools_fcnt.c:83:		process->offset = process->offset % MEM_SIZE;
